An island is a small piece of land surrounded by water . A group of islands is said to be connected if we can reach from any given island to any other island in the same group . Given N islands (numbered from 1 to N) and two lists of size M (u and v) denoting island u[i] is connected to island v[i] and vice versa . Can you count the number of connected groups of islands.
Constraints :
1<=N<=100
1<=M<=(N*(N-1))/2
1<=u[i],v[i]<=N
Input Format :

Line 1 : Two integers N and M
Line 2 : List u of size of M
Line 3 : List v of size of M

Output Return Format :

The count the number of connected groups of islands

Sample Input :

2 1
1
2

Sample Output :

1 

import java.util.Scanner;
import java.util.Queue;
import java.util.*;
public class solution {
    
    public static void help(int matrix[][], int fv,boolean visited[]){
        Queue<Integer> q = new LinkedList<>();
        q.add(fv);
        int n= matrix.length;
        while(q.size()!=0){
            int firstelem = q.remove();
            visited[fv] = true;
            for(int i=0; i<n; i++){
                if(matrix[firstelem][i]==1 && !visited[i]){
                    q.add(i);
                    visited[i]=true;
                }       
            }
        }   
    }
    
    public int solve(int n,int m,int U[],int V[]) {
        int matrix[][]=new int[n][n];
        boolean visited[]= new boolean[n];
        for(int i=0;i<m;i++)
        {
            int t1=U[i]-1;
            int t2=V[i]-1;
            matrix[t1][t2]=1;
            matrix[t2][t1]=1;
        }
        int ans=0;
        for(int i=0;i<n;i++)
        {
            if(!visited[i])
            {
                help(matrix,i,visited);
                ans++;
            }
        }
        return ans;
    }
}
