Given a BST, convert it into a sorted linked list. Return the head of LL.
Input format :

Elements in level order form (separated by space)
(If any node does not have left or right child, take -1 in its place)

Output Format :

Linked list elements (separated by space)

Sample Input :

8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1

Sample Output :

2 5 6 7 8 10

public class Solution {

/*	Binary Tree Node class 
 * 
 * 	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;
		
		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}
	*/

/* LinkedList Node Class
*
*	
class LinkedListNode<T> {
	T data;
	LinkedListNode<T> next;
	
	public LinkedListNode(T data) {
		this.data = data;
	}
}
*/

public static LinkedListNode<Integer> BSTToSortedLL(BinaryTreeNode<Integer> root){
		if(root==null)
        return null;
      LinkedListNode<Integer> temp = new LinkedListNode<>(root.data);
      LinkedListNode<Integer> temp1=BSTToSortedLL(root.left);
      LinkedListNode<Integer> temp2=BSTToSortedLL(root.right);
      LinkedListNode<Integer> head=temp1;
      if(temp1==null)
      {temp.next=temp2;
      return temp;}
      while(temp1.next!=null){
        temp1=temp1.next;
      }
      temp1.next=temp;
      temp1=temp;
      temp1.next=temp2;
      return head;   
	}	
}	
