Given a sorted integer array A of size n which contains all unique elements. You need to construct a balanced BST from this input array. Return the root of constructed BST.
Note : If array size is even, take first mid as root.
Input format :

Line 1 : Integer n (Size of array)
Line 2 : Array elements (separated by space)

Output Format :

BST elements (in pre order traversal, separated by space)

Sample Input :

7
1 2 3 4 5 6 7

Sample Output :

4 2 1 3 6 5 7 

public class Solution {
    public static BinaryTreeNode<Integer> SortedArrayToBST(int[] arr,int si,int ei){
        if(si>ei)
        {
            return null;
        }
        int l=(si+ei)/2;
        
        BinaryTreeNode<Integer> root=new BinaryTreeNode<Integer>(arr[l]);
        root.data=arr[l];
        root.left=SortedArrayToBST(arr,si,l-1);
        root.right=SortedArrayToBST(arr,l+1,ei);
            return root;
    }

	public static BinaryTreeNode<Integer> SortedArrayToBST(int[] arr){
        
        return SortedArrayToBST(arr,0,arr.length-1);
	}
}	
