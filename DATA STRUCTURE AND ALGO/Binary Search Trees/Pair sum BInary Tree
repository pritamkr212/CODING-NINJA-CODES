Given a binary tree and an integer S, print all the pair of nodes whose sum equals S.
Assume binary tree contains all unique elements.
Note : In a pair, print the smaller element first. Order of different pair doesn't matter.
Input format :

Line 1 : Elements in level order form (separated by space)
(If any node does not have left or right child, take -1 in its place)
Line 2 : Integer S

Output Format :

Each pair in different line (pair elements separated by space)

Constraints :
1 <= N <= 1000
Sample Input 1:

5 10 6 2 3 -1 -1 -1 -1 -1 9 -1 -1
15

Sample Output 1:

5 10
6 9

import java.util.ArrayList;
import java.util.Collections;
public class Solution {
   public static void treeToList( BinaryTreeNode<Integer> root, ArrayList<Integer> list) 
    {
        if(root==null)
        {
            return;
        }
        list.add(root.data);
        treeToList(root.left,list);
        treeToList(root.right,list);
        
    }
	public static void nodesSumToS(BinaryTreeNode<Integer> root, int sum) {
        ArrayList<Integer> a2 = new ArrayList<>();
        treeToList(root,a2);
        Collections.sort(a2);
        int i=0;
        int j=a2.size()-1;
        while(i<j)
        {
            
        if(a2.get(i)+a2.get(j)==sum)
        {
            System.out.println(a2.get(i)+" "+a2.get(j));
            i++;
            j--;
        }
        if(a2.get(i)+a2.get(j)>sum)
        {
            j--;
        }
        if(a2.get(i)+a2.get(j)<sum)
        {
            i++;
        }
    }
        
	}
}
