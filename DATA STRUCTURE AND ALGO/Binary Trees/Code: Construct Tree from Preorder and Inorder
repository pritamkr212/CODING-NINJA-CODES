For a given preorder and inorder traversal of a Binary Tree of type integer stored in an array/list, create the binary tree using the given two arrays/lists. You just need to construct the tree and return the root.
Note:

Assume that the Binary Tree contains only unique elements. 

Input Format:

The first line of input contains an integer N denoting the size of the list/array. It can also be said that N is the total number of nodes the binary tree would have.

The second line of input contains N integers, all separated by a single space. It represents the preorder-traversal of the binary tree.

The third line of input contains N integers, all separated by a single space. It represents the inorder-traversal of the binary tree.

Output Format:

The given input tree will be printed in a level order fashion where each level will be printed on a new line. 
Elements on every level will be printed in a linear fashion. A single space will separate them.

Constraints:

1 <= N <= 10^4
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec

Sample Input 1:

7
1 2 4 5 3 6 7 
4 2 5 1 6 3 7 

Sample Output 1:

1 
2 3 
4 5 6 7 

Sample Input 2:

6
5 6 2 3 9 10 
2 6 3 9 5 10 

Sample Output 2:

5 
6 10 
2 3 
9 

public class Solution {
public static BinaryTreeNode<Integer> help(int[] pre,int[] in,int pres,int preE,int ins,int ine)
{
    if(ins>ine)
    {
        return null;
    }
    int rootdata=pre[pres];
    BinaryTreeNode<Integer> ans=new BinaryTreeNode<Integer>(rootdata);
    int count=-1;
    for(int i=ins;i<=ine;i++)
    {
        if(in[i]==rootdata)
        {
            count=i;
            break;
        }
    }
    if(rootdata==-1)
    {
        return null;
    }
    int leftins=ins;
    int leftine=rootdata-1;
    int leftpres=pres+1;
    int leftpreE=leftine-leftins+leftpres;
    int rightins=rootdata+1;
    int rightine=ine;
    int rightpres=leftpreE+1;
    int rightpreE=preE;
    ans.left=help(pre,in,leftpres,leftpreE,leftins,leftine);
    ans.right=help(pre,in,rightpres,rightpreE,rightins,rightine);
    return ans;
}
    
    
    
	public static BinaryTreeNode<Integer> getTreeFromPreorderAndInorder(int[] pre,
			int[] in){
        	
       return help(pre,in,0,pre.length-1,0,in.length-1);
	}

}
