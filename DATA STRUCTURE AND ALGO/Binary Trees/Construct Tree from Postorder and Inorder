For a given postorder and inorder traversal of a Binary Tree of type integer stored in an array/list, create the binary tree using the given two arrays/lists. You just need to construct the tree and return the root.
Note:

Assume that the Binary Tree contains only unique elements. 

Input Format:

The first line of input contains an integer N denoting the size of the list/array. It can also be said that N is the total number of nodes the binary tree would have.

The second line of input contains N integers, all separated by a single space. It represents the Postorder-traversal of the binary tree.

The third line of input contains N integers, all separated by a single space. It represents the inorder-traversal of the binary tree.

Output Format:

The given input tree will be printed in a level order fashion where each level will be printed on a new line. 
Elements on every level will be printed in a linear fashion. A single space will separate them.

Constraints:

1 <= N <= 10^4
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec

Sample Input 1:

7
4 5 2 6 7 3 1 
4 2 5 1 6 3 7 

Sample Output 1:

1 
2 3 
4 5 6 7 

Sample Input 2:

6
2 9 3 6 10 5 
2 6 3 9 5 10 

Sample Output 2:

5 
6 10 
2 3 
9 

public class Solution {

	/*	Binary Tree Node class
	 * 
	 * class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
		}
	}
	 */
	public static BinaryTreeNode<Integer> buildTreeHelper(int in[], int po[], int inS, int inE, int poS, int poE) {
		if (inS > inE) {
			return null;
		}
		int rootData = po[poE];
		BinaryTreeNode<Integer> root = new BinaryTreeNode<Integer>(rootData);
		int rootInIndex = -1;
		for (int i = inS; i <= inE; i++) 
		{
			if (in[i] == rootData) {
				rootInIndex = i;
				break;
			}
		}
		if (rootInIndex == -1) {
			return null;
		}
		
		int leftInS = inS;
		int leftInE = rootInIndex - 1;
		int leftPoS = poS;
		int leftPoE = leftInE-leftInS+leftPoS;
		int rightInS = rootInIndex + 1;
		int rightInE = inE;
		int rightPoS = leftPoE + 1;
		int rightPoE = poE-1;
		root.left = buildTreeHelper(in, po, leftInS, leftInE, leftPoS, leftPoE);
		root.right = buildTreeHelper(in, po, rightInS, rightInE, rightPoS, rightPoE);
		return root;
	}
	public static BinaryTreeNode<Integer> getTreeFromPostorderAndInorder(int[] post,
			int[] in){
        return buildTreeHelper(in, post, 0, in.length - 1, 0, post.length -1);
	}

	


}
