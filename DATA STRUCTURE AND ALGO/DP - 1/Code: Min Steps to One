Given a positive integer 'n', find and return the minimum number of steps that 'n' has to take to get reduced to 1. You can perform any one of the following 3 steps:

1.) Subtract 1 from it. (n = n - ­1) ,
2.) If its divisible by 2, divide by 2.( if n % 2 == 0, then n = n / 2 ) ,
3.) If its divisible by 3, divide by 3. (if n % 3 == 0, then n = n / 3 ).  

Write brute-force recursive solution for this.
Input format :

The first and the only line of input contains an integer value, 'n'.

Output format :

Print the minimum number of steps.

Constraints :

1 <= n <= 200

Time Limit: 1 sec

Sample Input 1 :

4

Sample Output 1 :

2 

Explanation of Sample Output 1 :

For n = 4
Step 1 :  n = 4 / 2  = 2
Step 2 : n = 2 / 2  =  1 

Sample Input 2 :

7

Sample Output 2 :

3

Explanation of Sample Output 2 :

For n = 7
Step 1 :  n = 7 ­- 1 = 6
Step 2 : n = 6  / 3 = 2 
Step 3 : n = 2 / 2 = 1  




public class Solution {
	
    public static int help(int n,int count)
    {
        if(n==1)
        {
            return count;
        }
        int opt1=Integer.MAX_VALUE;
        int opt2=Integer.MAX_VALUE;
        int opt3=Integer.MAX_VALUE;
        if(n%3==0)
        {
            opt1= help(n/3,count+1);
        }
        if(n%2==0)
        {
            opt2=help(n/2,count+1);
        }
        opt3=help(--n,count+1);
        int a=Math.min(opt2,opt3);
        return Math.min(a,opt1);

    }
    
    
    
	public static int countStepsTo1(int n){
        int count=0;
        return help(n,count);
	}
	
}
