Gary has two string S and V. Now Gary wants to know the length shortest subsequence in S such that it is not a subsequence in V.
Note: input data will be such so there will always be a solution.
Input Format :

Line 1 : String S of length N (1 <= N <= 1000)
Line 2 : String V of length M (1 <= M <= 1000)

Output Format :

Length of shortest subsequence in S such that it is not a subsequence in V

Sample Input :

babab
babba

Sample Output :

3


Your Code
Main Code
Code Pair

public class Solution {
	
	public static int findMaxSquareWithAllZeros(int[][] input){
        int m=input.length;
        int n=input[0].length;
        int storage[][]= new int[m][n];
        int max=Integer.MIN_VALUE;
        for(int i=0;i<m;i++)
        {
            if(input[i][0]==0)
            {
                storage[i][0]=1;
            }
            else
            {
                storage[i][0]=0;
            }
            if(max<storage[i][0])
            {
                max=storage[i][0];
            }
        }
        for(int j=0;j<n;j++)
        {
            if(input[0][j]==0)
            {
                storage[0][j]=1;
            }
            else
            {
                storage[0][j]=0;
            }
            if(max<storage[0][j])
            {
                max=storage[0][j];
            }
        }
        for(int i=1;i<m;i++)
        {
            for(int j=1;j<n;j++)
            {
                if(input[i][j]==0)
                {
                    storage[i][j]=Math.min(storage[i-1][j-1],Math.min(storage[i-1][j],storage[i][j-1]))+1;
                }

                    else
                    {
                        storage[i][j]=0;
                    }
                    if(max<storage[i][j])
                    {
                        max=storage[i][j];
                    }
                }
            }
        return max;
        }
        

	}
