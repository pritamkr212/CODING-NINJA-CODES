Given an array consisting of positive and negative integers, find the length of the longest subarray whose sum is zero.
NOTE: You have to return the length of longest subarray .
Input Format :

Line 1 : Contains an integer N i.e. size of array

Line 2 : Contains N elements of the array, separated by spaces

Output Format

 Line 1 : Length of longest subarray 

Constraints:

0 <= N <= 10^8

Sample Input :

10 
 95 -97 -387 -435 -5 -70 897 127 23 284

Sample Output :

5

import java.util.HashMap;
import java.util.*;
public class solution 
{
    public static int lengthOfLongestSubsetWithZeroSum(ArrayList<Integer> arr) 
   	{
        int count=0;
		int maxcount=0;
        int sum=0;
        int index=0;
        HashMap<Integer,Integer> map= new HashMap<Integer,Integer>();
        for(int i=0;i<arr.size();i++)
        {
            index=i;
            sum+=arr.get(i);
            if(sum==0)
            {
               count=index+1;
                if(count>maxcount)
                {
                    maxcount=count;
                }
            }
            else if(map.containsKey(sum))
            {
                count=index-map.get(sum);
                if(count>maxcount)
                {
                    maxcount=count;
                }
            }
            else
            {
                map.put(sum,index);
            }
            
        }
        return maxcount;
	}
}
