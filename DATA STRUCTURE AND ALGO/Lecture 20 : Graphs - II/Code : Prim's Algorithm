Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Prim's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format -

v1 v2 w

where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1 <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.
Input Format :

Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)

Output Format :

MST

Constraints :
2 <= V, E <= 10^5
Sample Input 1 :

4 4
0 1 3
0 3 5
1 2 1
2 3 8

Sample Output 1 :

0 1 3
1 2 1
0 3 5

import java.util.Scanner;

public class Solution {
    
    
    public static void prims(int[][] adajmatrix)
    {
        int n=adajmatrix.length;
        boolean visited[]=new boolean[n];
        int[] weight=new int[n];
        int[] parent=new int[n];
        weight[0]=0;
        parent[0]=-1;
        for(int i=1;i<n;i++)
        {
            weight[i]=Integer.MAX_VALUE;
        }
        for(int j=0;j<n;j++)
        {
            int minvertex=find(weight,visited);
            visited[minvertex]=true;
            for(int k=0;k<n;k++)
            {
                if(adajmatrix[minvertex][k]!=0 && !visited[k])
                {
                    if(adajmatrix[minvertex][k]<weight[k])
                    {
                        weight[k]=adajmatrix[minvertex][k];
                        parent[k]=minvertex;
                    }
                }
            }
        }
        for(int i=1;i<n;i++)
        {
            if(parent[i]<i)
            {
                System.out.println(parent[i]+" "+i+" "+weight[i]);
            }
            else
            {
                System.out.println(i+" "+parent[i]+" "+weight[i]);
            }
        }
    }
    private static int find(int[] weight, boolean visited[]) {
		
		int minvertex = -1;
		for(int i = 0; i < weight.length; i++){
			if(!visited[i]  && (minvertex == -1 || weight[i] < weight[minvertex])){
				minvertex = i;
			}
		}
		return minvertex;
	}

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int V = s.nextInt();
		int E = s.nextInt();
        int adajmatrix[][]=new int[V][V];
        for(int i=0;i<E;i++)
        {
            int v1= s.nextInt();
            int v2=s.nextInt();
            int weight= s.nextInt();
            adajmatrix[v1][v2]=weight;
            adajmatrix[v2][v1]=weight;
        }
        prims(adajmatrix);
	}
}
