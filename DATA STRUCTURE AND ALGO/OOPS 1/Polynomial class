
/* Signature of four required functions is given in the code. You can create other functions as well if you need.
*  Also you should submit your code even if you are not done with all the functions. 
*/

// Main used internally is shown here just for your reference.
/*public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		int degree1[] = new int[n];
		for(int i = 0; i < n; i++){
			degree1[i] = s.nextInt();
		}
		int coeff1[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff1[i] = s.nextInt();
		}
		Polynomial first = new Polynomial();
		for(int i = 0; i < n; i++){
			first.setCoefficient(degree1[i],coeff1[i]);
		}
		n = s.nextInt();
		int degree2[] = new int[n];
		for(int i = 0; i < n; i++){
			degree2[i] = s.nextInt();
		}
		 int coeff2[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff2[i] = s.nextInt();
		}
		Polynomial second = new Polynomial();
		for(int i = 0; i < n; i++){
			second.setCoefficient(degree2[i],coeff2[i]);
		}
		int choice = s.nextInt();
		Polynomial result;
		switch(choice){
		// Add
		case 1: 
			 result = first.add(second);
			result.print();
			break;
		// Subtract	
		case 2 :
			 result = first.subtract(second);
			result.print();
			break;
		// Multiply
		case 3 :
			 result = first.multiply(second);
			result.print();
			break;
		}

	}
  */


public class Polynomial {

	
	/* This function sets coefficient for a particular degree value, if degree is not there in the polynomial
	 *  then corresponding term(with specified degree and value is added int the polynomial. If the degree
	 *  is already present in the polynomial then previous coefficient is replaced by
	 *  new coefficient value passed as function argument
	*/
	int coefficients[];
	
	public Polynomial() {
		coefficients = new int[5];
		
	}
	
//	public Polynomial(int[] coeff) {
//		coefficients = coeff;
//	}
   
    public  void setCoefficient(int deg , int coeff) {
    	while (deg >= coefficients.length) {
    		coefficients = restructure(coefficients);
    	}
    	
        coefficients[deg] = coeff;
    	
    }
	
    public  int[] restructure(int[] coefficients) {
    	int temp[] = coefficients;
    	coefficients = new int[coefficients.length * 2];
    	for(int i = 0 ; i< temp.length ; i++) {
    		coefficients[i] = temp[i];
    	}
        return coefficients;
    }
    
//    public int getCoefficient(int deg) {
//		
//	}
//    
//    
    public  int degree(int coeff[]) {
    	int result=0;
    	int val = 0;
    	
    	for(int i = 0; i<coeff.length; i++) {
    		if(coeff[i]>val) {
    			result = i;
    			val = coeff[i];
    		}
    	}
    	
    	return result;
    }
    
    public  void print() {
    	
    	for(int i = 0; i<coefficients.length; i++) {
    		if(coefficients[i] != 0) {
    			System.out.print(coefficients[i]+"x"+i+" ");
    		}
    	}
    	
    	System.out.println();
    }

    public   Polynomial add(Polynomial p) {
    	// int x = degree(p.coefficients);
    	// int y = degree(coefficients);
    	
    	if (coefficients.length > p.coefficients.length){
                for(int i=0; i< p.coefficients.length; i++ ) {
    		
    		    coefficients[i] = coefficients[i] + p.coefficients[i];
    	    }
            p.coefficients = coefficients;
        }else{
            for(int i=0; i< coefficients.length; i++ ) {
    		
    		    p.coefficients[i] = coefficients[i] + p.coefficients[i];
    	    }
        }
        return p;
    	
    }

    
    public  Polynomial subtract(Polynomial p) {
    	// int x = degree(p.coefficients);
    	// int y = degree(coefficients);
    	
    	if (coefficients.length > p.coefficients.length){
                for(int i=0; i< p.coefficients.length; i++ ) {
    		
    		    coefficients[i] = coefficients[i] - p.coefficients[i];
    	    }
            p.coefficients = coefficients;
        }else{
            int i=0;
            for(i< coefficients.length; i++ ) {
    		    p.coefficients[i] = coefficients[i] - p.coefficients[i];
    	    }
            for (i< p.coefficients.length; i++ ){
                p.coefficients[i] = p.coefficients[i]*(-1);
            }
        }
        return p;
    } 

      
   public  Polynomial multiply(Polynomial p) {
    // int x = degree(p.coefficients);
    // int y = degree(coefficients);
   //	int z = Math.max(x, y) ;
    int[] multipy_arr = new int[5];
    	
    	for(int i=0; i<coefficients.length; i++) {
    		
    		for(int j=0; j<p.coefficients.length; j++) {
    		   	int product =1;
    			product = coefficients[i] * p.coefficients[j] ;
    			
    			while((i+j)>=multipy_arr.length) {
    				multipy_arr = restructure(multipy_arr);
    			}
                
    			multipy_arr[i+j] = product+multipy_arr[i+j];
    		
    		}
    	}
       p.coefficients = multipy_arr;
    	return p;
    }

}
