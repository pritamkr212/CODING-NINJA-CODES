Implement the function RemoveMin for the min priority queue class.
For a minimum priority queue, write the function for removing the minimum element present. Remove and return the minimum element.
Note : main function is given for your reference which we are using internally to test the code.
import java.util.ArrayList;

/*****************
* Main function - 
*
	public static void main(String[] args) {
		PQ pq = new PQ();
		int choice = s.nextInt();
		while(choice != -1) {
			switch(choice) {
				case 1 : // insert
					int element = s.nextInt();
					pq.insert(element);
					break;
				case 2 : // getMin
				try {
					System.out.println(pq.getMin());
				} catch (PriorityQueueException e) {
					return;
				}
					break;
				case 3 : // removeMin
				try {
					System.out.println(pq.removeMin());
				} catch (PriorityQueueException e) {
					return;
				}
					break;
				case 4 : // size
					System.out.println(pq.size());
					break;
				case 5 : // isEmpty
					System.out.println(pq.isEmpty());
				default :
						return;
			}
			choice = s.nextInt();
		}
	}
*******************/

class PriorityQueueException extends Exception {

}

public class PQ {

	private ArrayList<Integer> heap;

	public PQ() {
		heap = new ArrayList<Integer>();
	}

	boolean isEmpty(){
		return heap.size() == 0;
	}

	int size(){
		return heap.size();
	}

	int getMin() throws PriorityQueueException{
		if(isEmpty()){
			// Throw an exception
			throw new PriorityQueueException();
		}
		return heap.get(0);
	}

	void insert(int element){
		heap.add(element);
		int childIndex = heap.size() - 1;
		int parentIndex = (childIndex - 1) / 2;

		while(childIndex > 0){
			if(heap.get(childIndex) < heap.get(parentIndex)){
				int temp = heap.get(childIndex);
				heap.set(childIndex, heap.get(parentIndex));
				heap.set(parentIndex, temp);
				childIndex = parentIndex;
				parentIndex = (childIndex - 1) / 2;
			}else{
				return;
			}
		}
	}

	int removeMin() {
        if(isEmpty()){
			throw new PriorityQueueException();
		}  
        int element=heap.get(size()-1);
        int i=0;
        heap.set(i,element);
        heap.remove(size()-1);
        int child1index=2*i+1;
        int child2index=2*i+2;
        while(child1<heap.size()&&child2<heap.size())
        {
            int parent=heap.get(i);
            int child1=heap.get(childindex1);
            int child2=heap.get(childindex2);
            if(parent>child1||parent>child2)
            {
                if(child1>child2)
                {
                    int temp=heap.get(i);
                    heap.set(i,heap.get(child2index));
                    heap.set(childindex2,temp);
                    i++;
                }
                else
                {
                    int temp=heap.get(i);
                    heap.set(i,heap.get(child1index));
                    heap.set(childindex1,temp);
                    i++;
                }
            }
        }
        return heap.get(i);
	}
}

