Sort an array A using Quick Sort.
Change in the input array itself. So no need to return or print anything.


Input format :

Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)

Output format :

Array elements in increasing order (separated by space)

Constraints :

1 <= n <= 10^3

Sample Input 1 :

6 
2 6 8 5 4 3

Sample Output 1 :

2 3 4 5 6 8

Sample Input 2 :

5
1 5 2 7 3

Sample Output 2 :

1 2 3 5 7 


public class Solution {

    public static void quickSort(int[] input) {
        quickSort(input,0,input.length-1);
    }

    public static void quickSort(int[] input,int si,int ei)
    {
        if(si>=ei)
        {
            return;
        }
        int pvPos=partition(input,si,ei);
        quickSort(input,si,pvPos-1);
        quickSort(input,pvPos+1,ei);
    }
    public static int partition(int[] input,int si,int ei)
    {
        int pv=input[si];
        int i=si;
        int count=0;
        while(i<=ei)
        {
            if(pv>input[i])
            {
                count++;
            }
            i++;
        }
        int pvPos=si+count;
        int temp=input[si];
        input[si]=input[pvPos];
        input[pvPos]=temp;
        int l=si;
        int m=ei;
        while(l<pvPos&&m>pvPos)
        {
            if(input[l]<pv)
            {
                l++;
            }
            else{
                if(input[m]>=pv) // changed
                {
                    m--;
                }
                else
                {
                    int temp1=input[l];
                    input[l]=input[m];
                    input[m]=temp1; //changed
                    l++; //added
                    m--; //added
                }
            }

        }
        return pvPos;
    }
}
