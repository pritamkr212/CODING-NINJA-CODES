Given an integer array (of length n), find and return all the subsets of input array.
Subsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array.
Note : The order of subsets are not important.

Input format :

Line 1 : Size of array

Line 2 : Array elements (separated by space)
Sample Input:

3
15 20 12

Sample Output:

[] (this just represents an empty array, don't worry about the square brackets)
12 
20 
20 12 
15 
15 12 
15 20 
15 20 12 

public class solution {

	// Return a 2D array that contains all the subsets
	public static int[][] subsets(int input[]) {
        return subsets(input,0);
	}
    public static int[][] subsets(int input[],int si) {
		// Write your code here
		if(si == input.length) {
			int a[][] = {{}};
			return a;
		}
		int a [][] = subsets(input,si+1);
		int b[][] = new int[2*a.length][];
		int k=0;
		for(int i = 0; i<a.length;i++) {
			b[i]= new int[a[i].length];
			for(int j = 0; j<a[i].length; j++) {
				b[k][j] = a[i][j];
			}
			k++;
		}
		
		for(int i = 0; i<a.length;i++) {
			int j = 0;
			b[k]= new int[a[i].length+1];
			b[k][j] = input[si];
			for(j = 0; j<a[i].length; j++) {
				b[k][j+1] = a[i][j];
			}
			k++;
		}
		return b;
	}
}
