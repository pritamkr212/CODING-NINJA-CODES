Given a generic tree, find and return the node with second largest value in given tree. Return NULL if no node with required value is present.
Input format :

Elements in level order form separated by space (as per done in class). Order is - 

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element 

Output format:

Second Largest node data

Sample Input 1 :

10 3 20 30 40 2 40 50 0 0 0 0 

Sample Output 1 :

40



public class Solution {

/*	TreeNode structure 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
    public static TreeNode<Integer> Secondlarge (TreeNode<Integer> root,TreeNode<Integer> large,TreeNode<Integer> seclarge)
    {
            if(root.data>large.data)
            {
                seclarge.data=large.data;
                large.data=root.data;
            }
        else if(root.data>seclarge.data&&root.data<large.data)
        {
            seclarge.data=root.data;
        }
        for(int i=0;i<root.children.size();i++)
        {
            seclarge=Secondlarge(root.children.get(i),large,seclarge);
        }
        return seclarge;
    }
	
	public static TreeNode<Integer> findSecondLargest(TreeNode<Integer> root){
        TreeNode<Integer> large=new TreeNode<>(Integer.MIN_VALUE);
        TreeNode<Integer> seclarge=new TreeNode<>(Integer.MIN_VALUE);
        seclarge=Secondlarge(root,large,seclarge);
        if(seclarge.data!=null)
        {
            return seclarge;
        }
        return null;

	}
	
	
}
