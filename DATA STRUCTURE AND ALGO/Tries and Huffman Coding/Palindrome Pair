Given 'n' number of words, you need to find if there exist any two words which can be joined to make a palindrome or any word itself is a palindrome.
The function should return either true or false. You don't need to print anything.
Input Format :

The first line of the test case contains an integer value denoting 'n'.

The second line of the test case will contain 'n' number of words each separated by a single space.

Output Format :

Print either true or false

Sample Input 1 :

4
abc def ghi cba

Sample Output 1 :

true

Explanation of Sample Input 1 :

"abc" and "cba" forms a palindrome

Sample Input 2 :

2
abc def

Sample Output 2 :

false

Explanation of Sample Input 1 :

Neither their exists a pair which forms a palindrome, nor any of the words is a palindrome in itself. Hence, the output is 'false.'


import java.util.ArrayList;

class TrieNode {
	char data;
	boolean isTerminating;
	TrieNode children[];
	int childCount;

	public TrieNode(char data) {
		this.data = data;
		isTerminating = false;
		children = new TrieNode[26];
		childCount = 0;
	}
}

public class Trie {

	private TrieNode root;
	public int count;

	public Trie() {
		root = new TrieNode('\0');
	}

	private void add(TrieNode root, String word){
		if(word.length() == 0){
			root.isTerminating = true;
			return;
		}		

		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];

		if(child == null) {
			child = new TrieNode(word.charAt(0));
			root.children[childIndex] = child;
			root.childCount++;
		}

		add(child, word.substring(1));
	}

	public void add(String word){
		add(root, word);
	}

	private boolean search(TrieNode root, String word) {
		if(word.length() == 0) {
			return root.isTerminating;
		}

		int childIndex=word.charAt(0) - 'a';
		TrieNode child=root.children[childIndex];

		if(child == null) {
			return false;
		}

		return search(child,word.substring(1));

	}

	public boolean search(String word) {
		return search(root,word);
	}

	private void print(TrieNode root, String word) {
		if (root == null) {
			return;
		}
		
		if (root.isTerminating) {
			System.out.println(word);
		}
		
		for (TrieNode child : root.children) {
			if (child == null) {
				continue;
			}
			String fwd = word + child.data;
			print(child, fwd);
		}
	}
	
	public void print() {
		print(this.root, "");
	}

    static boolean isPalindrome(String str) 
    { 
        int len = str.length(); 
        for (int i = 0; i < len/2; i++ ) 
            if (str.charAt(i) != str.charAt(len-i-1)) 
                return false; 
       
        return true; 
    } 

	/*..................... Palindrome Pair................... */


	public boolean isPalindromePair(ArrayList<String> words) {
		 String input1,p="";
        for(int i =0;i<words.size();i++){
            if(!search(root,words.get(i)))
                add(words.get(i));
        }
        for(int i =0;i<words.size();i++){
            p="";
            input1 = words.get(i);
            for(int k =0;k<input1.length();k++){
                p=input1.charAt(k)+p;
            }
            if(search(root,p)){
                return true;
            }
        }
        for (int i = 0; i< words.size()-1; i++) 
            { 
                for (int j = i+1; j< words.size() ; j++) 
                { 
                    String check_str = ""; 
                    check_str = check_str + words.get(i) + words.get(j); 
                    if (isPalindrome(check_str)) 
                        return true;
                }
            }
        return false;
	}
} 
