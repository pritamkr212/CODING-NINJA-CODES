Given a list of n words and a pattern p that we want to search. Check if the pattern p is present the given words or not.
Return true or false.
Input Format :

Line 1 : Integer n
Line 2 : n words (separated by space)
Line 3 : Pattern p (a string)

Output Format :

true ot false

Sample Input 1 :

4
abc def ghi cba
de

Sample Output 2 :

true

Sample Input 2 :

4
abc def ghi hg
hi

Sample Output 2 :

true

Sample Input 3 :

4
abc def ghi hg
hif

Sample Output 3 :

false

import java.util.ArrayList;

class TrieNode{
	char data;
	boolean isTerminating;
	TrieNode children[];
	int childCount;

	public TrieNode(char data) {
		this.data = data;
		isTerminating = false;
		children = new TrieNode[26];
		childCount = 0;
	}
}

public class Trie {
	private TrieNode root;
	
	public Trie() {
		root = new TrieNode('\0');
	}

	private void add(TrieNode root, String word){
		if(word.length() == 0){
			root.isTerminating = true;
			return;
		}		
		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];
		if(child == null){
			child = new TrieNode(word.charAt(0));
			root.children[childIndex] = child;
			root.childCount++;
		}
		add(child, word.substring(1));
	}

	public void add(String word){
		add(root, word);
	}
    
    public boolean search(String word){
        return search1(root,word);
	}
    private boolean search1(TrieNode root,String word)
    {
        if(word.length() == 0){
		   return true;
		}	
		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];
        if(child == null){
     		return false;
        }
        char c=word.charAt(0);
        if(child.data!=c)
        {
            return false;
        }
   		return search1(child,word.substring(1));
	}
	
	
	public boolean patternMatching(ArrayList<String> input, String pattern) {
        for(int i=0;i<input.size();i++)
        {
            String word=input.get(i);
            for(int j=0;j<word.length();j++)
            {
                add(word.substring(j));
            }
        }
        return search(pattern);
	}
    
}
